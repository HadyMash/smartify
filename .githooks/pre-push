#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>

remote="$1"
url="$2"

# Initialize a flag for failure
exit_code=0

echo "Checking for any errors...\n"

# Check ESLint
npm run eslint ./api/src ./api/test --exit-on-fatal-error
if [ $? -ne 0 ]; then
    echo "❌ Error found in the api server. Please fix any issues first\n"
    exit_code=1
fi

# Get the name of the remote branch being pushed to
REMOTE_BRANCH=$(git rev-parse --abbrev-ref --symbolic-full-name @{u} 2>/dev/null)

# Fallback to a default branch if no remote branch is set
if [ -z "$REMOTE_BRANCH" ]; then
  REMOTE_BRANCH="origin/main" # Change to your default branch
fi

# Check if the remote branch exists
if ! git rev-parse --verify "$REMOTE_BRANCH" >/dev/null 2>&1; then
  # If the remote branch doesn't exist, compare with the default branch
  REMOTE_BRANCH="origin/main" # Change to your default branch
fi

# Get the list of committed files between the remote branch and HEAD
COMMITTED_FILES=$(git diff --name-only "$REMOTE_BRANCH" HEAD --diff-filter=ACM)

if [ -n "$COMMITTED_FILES" ]; then
  # Check committed files with Prettier
  PRETTIER_FILES=$(echo "$COMMITTED_FILES" | xargs npx prettier --check --loglevel warn | grep "Code style issues found" | awk '{print $1}')

  if [ -n "$PRETTIER_FILES" ]; then
    echo "Prettier found committed files that need formatting. Aborting push."
    echo "Please format the api service files then commit and push again"
    exit_code=1
  fi
fi

# If Prettier or ESLint failed, exit early
if [ $exit_code -ne 0 ]; then
  exit $exit_code
fi

# Check Flutter app
flutter analyze ./app --no-fatal-infos
dart_analyze_exit_code=$?

if [ $dart_analyze_exit_code -ne 0 ]; then
  echo "❌ Error found in the app. Please fix any issues first"
  exit_code=1
fi

dart format -o none ./app --set-exit-if-changed

if [ $? -ne 0 ]; then
  echo "❌ Flutter app has unformatted files. Please format the files, commit them, and push again"
  exit_code=1
fi

echo "Running tests before pushing...\n"

# Change to api directory
cd api || {
    echo "❌ Failed to enter api directory\n"
    exit 1
}

# Run API tests
echo "Running API tests...\n"
npm run test
api_test_results=$?

# Change back to original dir
cd ..

# Change to app directory
cd app || {
    echo "\n❌ Failed to enter app directory\n"
    exit 1
}

# Run Flutter tests
echo "\nRunning Flutter tests...\n"
flutter test
app_test_results=$?

# Change back to original dir
cd ..

echo ""

# Check both test results
if [ $api_test_results -ne 0 ]; then
    echo "❌ API Tests failed. Push aborted.\n"
    exit_code=1
elif [ $app_test_results -ne 0 ]; then
    echo "❌ Flutter Tests failed. Push aborted.\n"
    exit_code=1
else
    echo "✅ All tests passed!\n"
fi

# Exit with the appropriate code (0 or 1)
exit $exit_code
