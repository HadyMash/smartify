/* eslint-disable @typescript-eslint/require-await */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
import { spawn } from 'child_process';
import { resolve } from 'path';
import fs from 'fs';
import { AcmeIoTAdapter } from '../../../services/iot/acme-adapter';
const projectDir = resolve('..', 'simulation', 'acme');
const sampleFile = resolve(projectDir, 'data/sample.json');
const child = spawn('npm', ['run', 'start', 'data/sample.json'], {
    cwd: projectDir,
    stdio: 'inherit',
    shell: true,
});
child.on('close', (code) => { console.log('Service stopped ${code}'); });
describe('AcmeIoTAdapter (with simulation)', () => {
    let adapter: AcmeIoTAdapter;
    let child: any;
  
    beforeEach(async () => {
      // Start the simulator
      child = spawn('npm', ['run', 'start', 'data/sample.json'], {
        cwd: projectDir,
        stdio: 'inherit',
        shell: true,
      });
  
      // Wait for the sample file to be created
      await new Promise<void>((resolve, reject) => {
        const interval = setInterval(() => {
          if (fs.existsSync(sampleFile)) {
            clearInterval(interval);
            resolve();
          }
        }, 1000);
  
        // Timeout if file isn't created in 15s
        setTimeout(() => {
          clearInterval(interval);
          reject(new Error('Simulator did not generate the sample file in time.'));
        }, 15000);
      });
  
      // Initialize AcmeIoTAdapter
      adapter = new AcmeIoTAdapter();
    });
  
    afterEach(() => {
      if (child) {
        child.kill(); // Stop the simulator
      }
    });
  
    it('should process real simulator data correctly', async () => {
      // Read the actual file generated by the simulator
      const fileContent = fs.readFileSync(sampleFile, 'utf-8');
      const jsonData = JSON.parse(fileContent);
  
      // Ensure the structure is correct
      expect(Array.isArray(jsonData.devices)).toBe(true);
      expect(jsonData.devices.length).toBeGreaterThan(0);
  
      // Process each device with the adapter
      for (const device of jsonData.devices) {
        const mappedDevice = adapter.mapDevice(device);
        expect(mappedDevice).toMatchObject({
          id: expect.any(String),
          type: expect.any(String),
          capabilities: expect.any(Array),
        });
      }
    });
  });